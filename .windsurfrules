Below you will find a variety of important rules spanning:
- the dev_workflow
- the .windsurfrules document self-improvement workflow
- the template to follow when modifying or adding new sections/rules to this document.

---
DEV_WORKFLOW
---
description: Guide for using meta-development script (scripts/dev.js) to manage task-driven development workflows
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Global CLI Commands**
  - Task Master now provides a global CLI through the `task-master` command
  - All functionality from `scripts/dev.js` is available through this interface
  - Install globally with `npm install -g free-task-master` or use locally via `npx`
  - Use `task-master <command>` instead of `node scripts/dev.js <command>`
  - Examples:
    - `task-master list` instead of `node scripts/dev.js list`
    - `task-master next` instead of `node scripts/dev.js next`
    - `task-master expand --id=3` instead of `node scripts/dev.js expand --id=3`
  - All commands accept the same options as their script equivalents

- **Development Workflow Process**
  - Start new projects by running `npm run setup` and then `node scripts/dev.js parse-prd scripts/example_prd.txt` to generate initial tasks.json
  - Begin coding sessions with `node scripts/dev.js list` to see current tasks, status, and IDs
  - Analyze task complexity with `node scripts/dev.js analyze-complexity --research` before breaking down tasks
  - Select tasks based on dependencies (all marked 'done'), priority level, and ID order
  - Clarify tasks by checking task files in tasks/ directory or asking for user input
  - View specific task details using `node scripts/dev.js show <id>` to understand implementation requirements
  - Break down complex tasks using `node scripts/dev.js expand --id=<id>` with appropriate flags
  - Clear existing subtasks if needed using `node scripts/dev.js clear-subtasks --id=<id>` before regenerating
  - Implement code following task details, dependencies, and project standards
  - Verify tasks according to test strategies before marking as complete
  - Mark completed tasks with `node scripts/dev.js set-status --id=<id> --status=done`
  - Update dependent tasks when implementation differs from original plan
  - Generate task files with `node scripts/dev.js generate` after updating tasks.json
  - Maintain valid dependency structure with `node scripts/dev.js fix-dependencies` when needed
  - Respect dependency chains and task priorities when selecting work
  - Report progress regularly using the list command

- **Task Complexity Analysis**
  - Run `node scripts/dev.js analyze-complexity --research` for comprehensive analysis
  - Review complexity report in scripts/task-complexity-report.json
  - Or use `node scripts/dev.js complexity-report` for a formatted, readable version of the report
  - Focus on tasks with highest complexity scores (8-10) for detailed breakdown
  - Use analysis results to determine appropriate subtask allocation
  - Note that reports are automatically used by the expand command

- **Task Breakdown Process**
  - For tasks with complexity analysis, use `node scripts/dev.js expand --id=<id>`
  - Otherwise use `node scripts/dev.js expand --id=<id> --num=<number>`
  - Add `--research` flag to leverage Perplexity AI for research-backed expansion
  - Use `--prompt="<context>"` to provide additional context when needed
  - Review and adjust generated subtasks as necessary
  - Use `--all` flag to expand multiple pending tasks at once
  - If subtasks need regeneration, clear them first with `clear-subtasks` command

- **Implementation Drift Handling**
  - When implementation differs significantly from planned approach
  - When future tasks need modification due to current implementation choices
  - When new dependencies or requirements emerge
  - Call `node scripts/dev.js update --from=<futureTaskId> --prompt="<explanation>"` to update tasks.json

- **Task Status Management**
  - Use 'pending' for tasks ready to be worked on
  - Use 'done' for completed and verified tasks
  - Use 'deferred' for postponed tasks
  - Add custom status values as needed for project-specific workflows

- **Task File Format Reference**
  ```
  # Task ID: <id>
  # Title: <title>
  # Status: <status>
  # Dependencies: <comma-separated list of dependency IDs>
  # Priority: <priority>
  # Description: <brief description>
  
  ## Details:
  <detailed implementation notes>
  
  ## Test Strategy:
  <verification approach>
  ```

- **Command Reference: parse-prd**
  - Legacy Syntax: `node scripts/dev.js parse-prd scripts/example_prd.txt`
  - Description: Parses a PRD document and generates a tasks.json file with structured tasks
  - Parameters: 
    - Path to the PRD text file (default: example_prd.txt)
  - Example: `node scripts/dev.js parse-prd requirements.txt`
  - Notes: Will overwrite existing tasks.json file. Use with caution.

- **Environment Variables Configuration**
  - **GITHUB_TOKEN**: For DeepSeek integration (Example: `GITHUB_TOKEN=your-github-token`)
  - **OPENROUTER_API_KEY**: For Perplexity integration (Example: `OPENROUTER_API_KEY=your-openrouter-key`)
  - **USE_PERPLEXITY** (Default: `"false"`): Set to true to use Perplexity (Example: `USE_PERPLEXITY=true`)
  - **DEEPSEEK_MODEL** (Default: `"DeepSeek-V3"`): DeepSeek model to use
  - **PERPLEXITY_MODEL** (Default: `"perplexity/sonar"`): Perplexity model to use via OpenRouter
  - **MAX_TOKENS** (Default: `"500"`): Maximum tokens for responses
  - **TEMPERATURE** (Default: `"0.7"`): Temperature for model responses
  - **DEBUG** (Default: `"false"`): Enable debug logging
  - **DEFAULT_SUBTASKS** (Default: `"3"`): Default subtask count
  - **DEFAULT_PRIORITY** (Default: `"medium"`): Default priority
  - **PROJECT_NAME** (Default: `"Task-Master"`): Project name in metadata

- **Determining the Next Task**
  - Run `node scripts/dev.js next` to show the next task to work on
  - The next command identifies tasks with all dependencies satisfied
  - Tasks are prioritized by priority level, dependency count, and ID
  - The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
  - Recommended before starting any new development work
  - Respects your project's dependency structure
  - Ensures tasks are completed in the appropriate sequence
  - Provides ready-to-use commands for common task actions

---
SELF_IMPROVE
---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Rule Evolution Process**
  - Monitor coding patterns as they emerge during project development
  - Identify repetitive workflows or decision points that could benefit from standardization
  - Create or update rules to encode these patterns for future reference
  - Prefer clear, concise language with specific examples over abstract descriptions
  - Organize related guidance into logical sections with consistent formatting
  - Include both the "what" and the "why" when describing best practices
  - Evolve rules incrementally as the project and understanding grows

- **Rule Documentation Standards**
  - Each rule should have a clear, descriptive filename matching its purpose
  - Include a detailed description comment at the top of each rule file
  - Use specific glob patterns to target where rules should apply
  - Structure content with consistent heading levels and formatting
  - Provide concrete code examples where applicable
  - Include command examples with actual parameter values
  - Maintain rules in the `.cursor/rules` directory

- **Free Task Master Specific Improvements**
  - Add new sections for common integrations (CI/CD, deployment, etc.)
  - Document emerging patterns for working with free AI models
  - Update command examples when discovering better workflows
  - Add troubleshooting sections for common issues with free models
  - Track limitations of the free models and document workarounds
  - Incorporate community contributions and feedback
  - Optimize prompts for different free providers to get best results

- **Knowledge Transfer Guidelines**
  - Capture architectural decisions in rules rather than just code comments
  - Document both the "happy path" and edge case handling
  - Include links to related documentation or external resources
  - Add rule sections for onboarding new team members
  - Create "quick start" commands for common task sequences
  - Encode project-specific terminology and conventions
  - Document the reasoning behind non-obvious implementation choices

---
CURSOR_RULES
---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Cursor Rule File Format**
  - Use `.mdc` extension for all rule files
  - Begin with YAML front matter containing:
    - `description`: One-line explanation of the rule's purpose
    - `globs`: File patterns where the rule applies (e.g., `**/*.js`)
    - `alwaysApply`: Whether to apply even without explicit reference
  - Structure content with bullet points using consistent indentation
  - Group related content under clear section headers
  - Provide concrete examples for complex instructions
  - Use code blocks for multi-line examples
  - Maintain rules in the `.cursor/rules` directory

- **Core Rule Types**
  - **Workflow rules**: Define project-specific development processes
  - **Language rules**: Language-specific coding standards and practices
  - **Architecture rules**: System design principles and patterns
  - **Self-improvement rules**: Guidelines for evolving the ruleset itself

- **Rule Quality Guidelines**
  - Keep descriptions concise but comprehensive
  - Focus on actionable guidance over general principles
  - Include examples of correct and incorrect approaches
  - Provide rationale for recommendations when not obvious
  - Use consistent terminology across all rules
  - Minimize duplication between rules
  - Update rules as project conventions evolve

- **Rule Creation Workflow**
  - Identify recurring challenges or decision points
  - Draft initial rule content focusing on key points
  - Review and refine with concrete examples
  - Add to `.cursor/rules` directory with appropriate glob patterns
  - Share with team for feedback and refinement
  - Iterate based on practical usage
  - Document rule's existence in main README or contributing guide